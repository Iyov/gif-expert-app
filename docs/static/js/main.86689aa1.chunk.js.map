{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifts.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifts.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","console","log","placeholder","getGifts","category","a","url","encodeURI","fetch","resp","json","data","gifts","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","imgs","useFetchGifts","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"8KAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qBCJDQ,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAqBhD,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAe,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,QAM7C,SACI,uBACIC,KAAK,OACLC,MAAQT,EACRU,SAtBc,SAACP,GAEvBF,EAAeE,EAAEQ,OAAOF,OAExBG,QAAQC,IAAI,+BAmBJC,YAAY,6C,+BC9BfC,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACmCC,UAAWH,GAD9C,+DAEDI,MAAOF,GAFN,cAEdG,EAFc,gBAGGA,EAAKC,OAHR,uBAGZC,EAHY,EAGZA,KAEFC,EAAQD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATtB,kBAYbM,GAZa,4CAAH,sDCGRO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAGlC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCLJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDZ,SAAEA,GAAe,IAAD,EACfjB,mBAAS,CAC/BwB,KAAM,GACNa,SAAS,IAH4B,mBAClCC,EADkC,KAC3BC,EAD2B,KAkBzC,OAZAC,qBAAU,WACNxB,EAAUC,GACLzB,MAAM,SAAAiD,GAEHF,EAAS,CACLf,KAAMiB,EACNJ,SAAS,SAItB,CAACpB,IAEGqB,EDf0BI,CAAezB,GAAnCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEdzBe,EAAe,WAAO,IAAD,EAEM3C,mBAAS,CAAC,cAFhB,mBAEvB4C,EAFuB,KAEX7C,EAFW,KAS9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ6C,EAAWlB,KAAK,SAACT,GAAD,OACZ,cAAC,EAAD,CAEIA,SAAUA,GADJA,Y,MChBlC4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1B3D,M","file":"static/js/main.86689aa1.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        //console.log(e.target.value);\r\n        setInputValue( e.target.value );\r\n\r\n        console.log('handleInputChange invocado');\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //console.log('asd')\r\n        \r\n        if( inputValue.trim().length > 2 ) {\r\n            setCategories( (cats) => [inputValue, ...cats] );\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n                placeholder=\"Ingresa un texto para buscar sus gifs\"\r\n            />\r\n        </form> \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifts = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=T3ymTH2QVzdxnpvXioVDbsLSNpiH5C7l`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifts = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    } )\r\n    return gifts;\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n    //console.log(id, url, title);\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired\r\n}","import React from 'react'; //, { useState, useEffect }\r\nimport { useFetchGifts } from '../hooks/useFetchGifts';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    \r\n    const { data:images, loading } = useFetchGifts( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{ category }</h3>\r\n\r\n            { loading && <p className='animate__animated animate__flash'>Loading...</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            { ...img } \r\n                        />\r\n                    ))\r\n                    \r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifts } from \"../helpers/getGifts\";\r\n\r\nexport const useFetchGifts = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifts( category )\r\n            .then( imgs => {\r\n                \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n\r\n            } )\r\n    }, [category])\r\n\r\n    return state; // { data:[], loading: true }\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    const [categories, setCategories] = useState(['Samurai X'])\r\n\r\n    /*const handleAdd = () => {\r\n        //setCategories( [...categories, 'HunterXHunter'] );\r\n        setCategories( (cats) => [...cats, 'HunterXHunter'] );\r\n    }*/\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( (category) => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}